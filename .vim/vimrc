" Source config
" =============
" Set up vim dirs. {{{
let $VIMDIR = $HOME.(has('nvim') ? '/.config/nvim' : (has('unix') ? '/.vim' : '/vimfiles'))
" Backup, swap, undo files. Create vim dirs if missing.
if has('persistent_undo')
    set undodir=$VIMDIR/undo//
    if !isdirectory(&undodir) | call mkdir(&undodir, 'p', 0700) | endif
    set undofile
endif
set backupdir=$VIMDIR/backup//         " For backup files
set backup
set directory=$VIMDIR/backup//         " For .swp files
set swapfile
set backupskip=/tmp/*                  " Add some paths not to back up
set backupskip^=/dev/shm/*             " Shared memory RAM disk
set backupskip^=/var/tmp/*             " Debian's $TMPDIR for sudoedit(8)
if !has('unix')
    set backupskip-=/dev/shm/*
    set backupskip-=/var/tmp/*
endif
if !isdirectory(&backupdir) | call mkdir(&backupdir, 'p', 0700) | endif
if !isdirectory(&dir)       | call mkdir(&dir, 'p', 0700)       | endif
if !isdirectory(&viewdir)   | call mkdir(&viewdir, 'p', 0700)   | endif
if !isdirectory($VIMDIR.'/config') | call mkdir($VIMDIR.'/config', 'p') | endif
if exists('+history')
	set history=2000                   " Max is 10000
endif
set undolevels=2000                    " Number of undos
set undoreload=8000                    " Number of lines to save for undo
" }}}

" Source any .vim files from config dir.
runtime! config/*.vim
" config/settings.vim
" config/plugins.vim
" config/mappings.vim

" For nvim on Windows, use powershell:
if has('win64') && has('nvim')
    let &shell = executable('pwsh') ? 'pwsh' : 'powershell'
    let &shellcmdflag = '-NoLogo -ExecutionPolicy RemoteSigned -Command [Console]::InputEncoding=[Console]::OutputEncoding=[System.Text.UTF8Encoding]::new();$PSDefaultParameterValues[''Out-File:Encoding'']=''utf8'';'
    let &shellredir = '2>&1 | %%{ "$_" } | Out-File %s; exit $LastExitCode'
    let &shellpipe  = '2>&1 | %%{ "$_" } | Tee-Object %s; exit $LastExitCode'
    set shellquote= shellxquote=
endif

" Templates
if has("autocmd")
    augroup templates
        au!
        autocmd BufNewFile *.* silent! execute '0r ~/.vim/templates/skeleton.'.expand("<afile>:e")
    augroup END
endif

" Todo {{{
" ====
" https://github.com/junegunn/dotfiles/blob/master/vimrc#L856
function! s:todo() abort
    let entries = []
    for cmd in ['git grep -niI -e TODO -e FIXME -e XXX 2> /dev/null',
            \ 'grep -rniI -e TODO -e FIXME -e XXX * 2> /dev/null']
        let lines = split(system(cmd), '\n')
        if v:shell_error != 0 | continue | endif
        for line in lines
            let [fname, lno, text] = matchlist(line, '^\([^:]*\):\([^:]*\):\(.*\)')[1:3]
            call add(entries, { 'filename': fname, 'lnum': lno, 'text': text })
        endfor
        break
    endfor
    if !empty(entries)
        call setqflist(entries)
        copen
    endif
endfunction
command! Todo call s:todo()
nnoremap <leader>T :Todo<space><cr>
" }}}

" Termux pasting
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
